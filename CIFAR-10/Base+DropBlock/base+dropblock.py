# -*- coding: utf-8 -*-
"""Base+DropBlock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjYfQMHsa9YyhL8QHv6SQ1eRbQtUBdUK
"""

#Test if have GPU
from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())
import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))

import sys
print(sys.executable)
#We will make a basic CNN model to classify CIFAR-100#
#We will use Keras from Tensorflow to build the model#
import ssl

print(ssl.get_default_verify_paths())



from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.losses import sparse_categorical_crossentropy
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import TensorBoard
from keras_cv.layers import DropBlock2D
import numpy as np
import matplotlib.pyplot as plt
import datetime
import json

#show the tensorflow version
print(tf.__version__)

#load the CIFAR-10 dataset & split into train and test sets
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

#Normalize pixel values from 1-255 to 0-1
x_train, x_test = x_train / 255.0, x_test / 255.0

#show the shape of the dataset
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

#shuffle train & test data

# Assuming x_train and y_train are your data
#indices = np.arange(x_train.shape[0])
#np.random.shuffle(indices)

# # Let's say we want to select 10000 random samples
# x_train_subset = x_train[indices[:10000]]
# y_train_subset = y_train[indices[:10000]]

#Build model
modelA_1_X = Sequential()
# Block 1
modelA_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_1_X.add(DropBlock2D(0.01, block_size=3))
modelA_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_1_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_1_X.add(Flatten())
modelA_1_X.add(Dense(256, activation='relu'))
# Block 5
modelA_1_X.add(Dense(10, activation='softmax'))



#Build model
modelA_1_Y = Sequential()
# Block 1
modelA_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_1_Y.add(DropBlock2D(0.01, block_size=5))
modelA_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_1_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_1_Y.add(Flatten())
modelA_1_Y.add(Dense(256, activation='relu'))
# Block 5
modelA_1_Y.add(Dense(10, activation='softmax'))




#Build model
modelA_1_W = Sequential()
# Block 1
modelA_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_1_W.add(DropBlock2D(0.01, block_size=7))
modelA_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_1_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_1_W.add(Flatten())
modelA_1_W.add(Dense(256, activation='relu'))
# Block 5
modelA_1_W.add(Dense(10, activation='softmax'))



#Build model
modelA_1_Z = Sequential()
# Block 1
modelA_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_1_Z.add(DropBlock2D(0.01, block_size=9))
modelA_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_1_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_1_Z.add(Flatten())
modelA_1_Z.add(Dense(256, activation='relu'))
# Block 5
modelA_1_Z.add(Dense(10, activation='softmax'))




#Build model
modelB_1_X = Sequential()
# Block 1
modelB_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_1_X.add(DropBlock2D(0.1, block_size=3))
modelB_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_1_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_1_X.add(Flatten())
modelB_1_X.add(Dense(256, activation='relu'))
# Block 5
modelB_1_X.add(Dense(10, activation='softmax'))



#Build model
modelB_1_Y = Sequential()
# Block 1
modelB_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_1_Y.add(DropBlock2D(0.1, block_size=5))
modelB_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_1_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_1_Y.add(Flatten())
modelB_1_Y.add(Dense(256, activation='relu'))
# Block 5
modelB_1_Y.add(Dense(10, activation='softmax'))




#Build model
modelB_1_W = Sequential()
# Block 1
modelB_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_1_W.add(DropBlock2D(0.1, block_size=7))
modelB_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_1_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_1_W.add(Flatten())
modelB_1_W.add(Dense(256, activation='relu'))
# Block 5
modelB_1_W.add(Dense(10, activation='softmax'))



#Build model
modelB_1_Z = Sequential()
# Block 1
modelB_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_1_Z.add(DropBlock2D(0.1, block_size=9))
modelB_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_1_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_1_Z.add(Flatten())
modelB_1_Z.add(Dense(256, activation='relu'))
# Block 5
modelB_1_Z.add(Dense(10, activation='softmax'))




#Build model
modelC_1_X = Sequential()
# Block 1
modelC_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_1_X.add(DropBlock2D(0.2, block_size=3))
modelC_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_1_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_1_X.add(Flatten())
modelC_1_X.add(Dense(256, activation='relu'))
# Block 5
modelC_1_X.add(Dense(10, activation='softmax'))



#Build model
modelC_1_Y = Sequential()
# Block 1
modelC_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_1_Y.add(DropBlock2D(0.2, block_size=5))
modelC_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_1_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_1_Y.add(Flatten())
modelC_1_Y.add(Dense(256, activation='relu'))
# Block 5
modelC_1_Y.add(Dense(10, activation='softmax'))




#Build model
modelC_1_W = Sequential()
# Block 1
modelC_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_1_W.add(DropBlock2D(0.2, block_size=7))
modelC_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_1_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_1_W.add(Flatten())
modelC_1_W.add(Dense(256, activation='relu'))
# Block 5
modelC_1_W.add(Dense(10, activation='softmax'))



#Build model
modelC_1_Z = Sequential()
# Block 1
modelC_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_1_Z.add(DropBlock2D(0.2, block_size=9))
modelC_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_1_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_1_Z.add(Flatten())
modelC_1_Z.add(Dense(256, activation='relu'))
# Block 5
modelC_1_Z.add(Dense(10, activation='softmax'))




#Build model
modelD_1_X = Sequential()
# Block 1
modelD_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_1_X.add(DropBlock2D(0.5, block_size=3))
modelD_1_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_1_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_1_X.add(Flatten())
modelD_1_X.add(Dense(256, activation='relu'))
# Block 5
modelD_1_X.add(Dense(10, activation='softmax'))



#Build model
modelD_1_Y = Sequential()
# Block 1
modelD_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_1_Y.add(DropBlock2D(0.5, block_size=5))
modelD_1_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_1_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_1_Y.add(Flatten())
modelD_1_Y.add(Dense(256, activation='relu'))
# Block 5
modelD_1_Y.add(Dense(10, activation='softmax'))




#Build model
modelD_1_W = Sequential()
# Block 1
modelD_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_1_W.add(DropBlock2D(0.5, block_size=7))
modelD_1_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_1_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_1_W.add(Flatten())
modelD_1_W.add(Dense(256, activation='relu'))
# Block 5
modelD_1_W.add(Dense(10, activation='softmax'))



#Build model
modelD_1_Z = Sequential()
# Block 1
modelD_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_1_Z.add(DropBlock2D(0.5, block_size=9))
modelD_1_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_1_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_1_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_1_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_1_Z.add(Flatten())
modelD_1_Z.add(Dense(256, activation='relu'))
# Block 5
modelD_1_Z.add(Dense(10, activation='softmax'))

#Build model
modelA_2_X = Sequential()
# Block 1
modelA_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_2_X.add(DropBlock2D(0.01, block_size=3))
modelA_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_2_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_2_X.add(Flatten())
modelA_2_X.add(Dense(256, activation='relu'))
# Block 5
modelA_2_X.add(Dense(10, activation='softmax'))



#Build model
modelA_2_Y = Sequential()
# Block 1
modelA_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_2_Y.add(DropBlock2D(0.01, block_size=5))
modelA_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

# Block 2
modelA_2_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_2_Y.add(Flatten())
modelA_2_Y.add(Dense(256, activation='relu'))
# Block 5
modelA_2_Y.add(Dense(10, activation='softmax'))




#Build model
modelA_2_W = Sequential()
# Block 1
modelA_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_2_W.add(DropBlock2D(0.01, block_size=7))
modelA_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_2_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_2_W.add(Flatten())
modelA_2_W.add(Dense(256, activation='relu'))
# Block 5
modelA_2_W.add(Dense(10, activation='softmax'))



#Build model
modelA_2_Z = Sequential()
# Block 1
modelA_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_2_Z.add(DropBlock2D(0.01, block_size=9))
modelA_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_2_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_2_Z.add(Flatten())
modelA_2_Z.add(Dense(256, activation='relu'))
# Block 5
modelA_2_Z.add(Dense(10, activation='softmax'))




#Build model
modelB_2_X = Sequential()
# Block 1
modelB_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_2_X.add(DropBlock2D(0.1, block_size=3))
modelB_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_2_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_2_X.add(Flatten())
modelB_2_X.add(Dense(256, activation='relu'))
# Block 5
modelB_2_X.add(Dense(10, activation='softmax'))



#Build model
modelB_2_Y = Sequential()
# Block 1
modelB_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_2_Y.add(DropBlock2D(0.1, block_size=5))
modelB_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_2_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_2_Y.add(Flatten())
modelB_2_Y.add(Dense(256, activation='relu'))
# Block 5
modelB_2_Y.add(Dense(10, activation='softmax'))




#Build model
modelB_2_W = Sequential()
# Block 1
modelB_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_2_W.add(DropBlock2D(0.1, block_size=7))
modelB_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_2_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_2_W.add(Flatten())
modelB_2_W.add(Dense(256, activation='relu'))
# Block 5
modelB_2_W.add(Dense(10, activation='softmax'))



#Build model
modelB_2_Z = Sequential()
# Block 1
modelB_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_2_Z.add(DropBlock2D(0.1, block_size=9))
modelB_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_2_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_2_Z.add(Flatten())
modelB_2_Z.add(Dense(256, activation='relu'))
# Block 5
modelB_2_Z.add(Dense(10, activation='softmax'))




#Build model
modelC_2_X = Sequential()
# Block 1
modelC_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_2_X.add(DropBlock2D(0.2, block_size=3))
modelC_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_2_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_2_X.add(Flatten())
modelC_2_X.add(Dense(256, activation='relu'))
# Block 5
modelC_2_X.add(Dense(10, activation='softmax'))



#Build model
modelC_2_Y = Sequential()
# Block 1
modelC_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_2_Y.add(DropBlock2D(0.2, block_size=5))
modelC_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_2_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_2_Y.add(Flatten())
modelC_2_Y.add(Dense(256, activation='relu'))
# Block 5
modelC_2_Y.add(Dense(10, activation='softmax'))




#Build model
modelC_2_W = Sequential()
# Block 1
modelC_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_2_W.add(DropBlock2D(0.2, block_size=7))
modelC_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_2_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_2_W.add(Flatten())
modelC_2_W.add(Dense(256, activation='relu'))
# Block 5
modelC_2_W.add(Dense(10, activation='softmax'))



#Build model
modelC_2_Z = Sequential()
# Block 1
modelC_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_2_Z.add(DropBlock2D(0.2, block_size=9))
modelC_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_2_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_2_Z.add(Flatten())
modelC_2_Z.add(Dense(256, activation='relu'))
# Block 5
modelC_2_Z.add(Dense(10, activation='softmax'))




#Build model
modelD_2_X = Sequential()
# Block 1
modelD_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_2_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_2_X.add(DropBlock2D(0.5, block_size=3))
modelD_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_2_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_2_X.add(Flatten())
modelD_2_X.add(Dense(256, activation='relu'))
# Block 5
modelD_2_X.add(Dense(10, activation='softmax'))



#Build model
modelD_2_Y = Sequential()
# Block 1
modelD_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_2_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_2_Y.add(DropBlock2D(0.5, block_size=5))
modelD_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_2_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_2_Y.add(Flatten())
modelD_2_Y.add(Dense(256, activation='relu'))
# Block 5
modelD_2_Y.add(Dense(10, activation='softmax'))




#Build model
modelD_2_W = Sequential()
# Block 1
modelD_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_2_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_2_W.add(DropBlock2D(0.5, block_size=7))
modelD_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_2_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_2_W.add(Flatten())
modelD_2_W.add(Dense(256, activation='relu'))
# Block 5
modelD_2_W.add(Dense(10, activation='softmax'))



#Build model
modelD_2_Z = Sequential()
# Block 1
modelD_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_2_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_2_Z.add(DropBlock2D(0.5, block_size=9))
modelD_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_2_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_2_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_2_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_2_Z.add(Flatten())
modelD_2_Z.add(Dense(256, activation='relu'))
# Block 5
modelD_2_Z.add(Dense(10, activation='softmax'))

#Build model
modelA_3_X = Sequential()
# Block 1
modelA_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_3_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_3_X.add(DropBlock2D(0.01, block_size=3))
modelA_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_3_X.add(Flatten())
modelA_3_X.add(Dense(256, activation='relu'))
# Block 5
modelA_3_X.add(Dense(10, activation='softmax'))



#Build model
modelA_3_Y = Sequential()
# Block 1
modelA_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

# Block 2
modelA_3_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_3_Y.add(DropBlock2D(0.01, block_size=5))
modelA_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_3_Y.add(Flatten())
modelA_3_Y.add(Dense(256, activation='relu'))
# Block 5
modelA_3_Y.add(Dense(10, activation='softmax'))




#Build model
modelA_3_W = Sequential()
# Block 1
modelA_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_3_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_3_W.add(DropBlock2D(0.01, block_size=7))
modelA_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_3_W.add(Flatten())
modelA_3_W.add(Dense(256, activation='relu'))
# Block 5
modelA_3_W.add(Dense(10, activation='softmax'))



#Build model
modelA_3_Z = Sequential()
# Block 1
modelA_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_3_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_3_Z.add(DropBlock2D(0.01, block_size=9))
modelA_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelA_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_3_Z.add(Flatten())
modelA_3_Z.add(Dense(256, activation='relu'))
# Block 5
modelA_3_Z.add(Dense(10, activation='softmax'))




#Build model
modelB_3_X = Sequential()
# Block 1
modelB_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_3_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_3_X.add(DropBlock2D(0.1, block_size=3))
modelB_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_3_X.add(Flatten())
modelB_3_X.add(Dense(256, activation='relu'))
# Block 5
modelB_3_X.add(Dense(10, activation='softmax'))



#Build model
modelB_3_Y = Sequential()
# Block 1
modelB_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_3_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_3_Y.add(DropBlock2D(0.1, block_size=5))
modelB_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_3_Y.add(Flatten())
modelB_3_Y.add(Dense(256, activation='relu'))
# Block 5
modelB_3_Y.add(Dense(10, activation='softmax'))




#Build model
modelB_3_W = Sequential()
# Block 1
modelB_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_3_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_3_W.add(DropBlock2D(0.1, block_size=7))
modelB_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_3_W.add(Flatten())
modelB_3_W.add(Dense(256, activation='relu'))
# Block 5
modelB_3_W.add(Dense(10, activation='softmax'))



#Build model
modelB_3_Z = Sequential()
# Block 1
modelB_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_3_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_3_Z.add(DropBlock2D(0.1, block_size=9))
modelB_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelB_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_3_Z.add(Flatten())
modelB_3_Z.add(Dense(256, activation='relu'))
# Block 5
modelB_3_Z.add(Dense(10, activation='softmax'))




#Build model
modelC_3_X = Sequential()
# Block 1
modelC_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_3_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_3_X.add(DropBlock2D(0.2, block_size=3))
modelC_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_3_X.add(Flatten())
modelC_3_X.add(Dense(256, activation='relu'))
# Block 5
modelC_3_X.add(Dense(10, activation='softmax'))



#Build model
modelC_3_Y = Sequential()
# Block 1
modelC_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_3_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_3_Y.add(DropBlock2D(0.2, block_size=5))
modelC_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_3_Y.add(Flatten())
modelC_3_Y.add(Dense(256, activation='relu'))
# Block 5
modelC_3_Y.add(Dense(10, activation='softmax'))




#Build model
modelC_3_W = Sequential()
# Block 1
modelC_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_3_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_3_W.add(DropBlock2D(0.2, block_size=7))
modelC_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_3_W.add(Flatten())
modelC_3_W.add(Dense(256, activation='relu'))
# Block 5
modelC_3_W.add(Dense(10, activation='softmax'))



#Build model
modelC_3_Z = Sequential()
# Block 1
modelC_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_3_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_3_Z.add(DropBlock2D(0.2, block_size=9))
modelC_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelC_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_3_Z.add(Flatten())
modelC_3_Z.add(Dense(256, activation='relu'))
# Block 5
modelC_3_Z.add(Dense(10, activation='softmax'))




#Build model
modelD_3_X = Sequential()
# Block 1
modelD_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_3_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_3_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_3_X.add(DropBlock2D(0.5, block_size=3))
modelD_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_3_X.add(Flatten())
modelD_3_X.add(Dense(256, activation='relu'))
# Block 5
modelD_3_X.add(Dense(10, activation='softmax'))



#Build model
modelD_3_Y = Sequential()
# Block 1
modelD_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_3_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_3_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_3_Y.add(DropBlock2D(0.5, block_size=5))
modelD_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_3_Y.add(Flatten())
modelD_3_Y.add(Dense(256, activation='relu'))
# Block 5
modelD_3_Y.add(Dense(10, activation='softmax'))




#Build model
modelD_3_W = Sequential()
# Block 1
modelD_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_3_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_3_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_3_W.add(DropBlock2D(0.5, block_size=7))
modelD_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_3_W.add(Flatten())
modelD_3_W.add(Dense(256, activation='relu'))
# Block 5
modelD_3_W.add(Dense(10, activation='softmax'))



#Build model
modelD_3_Z = Sequential()
# Block 1
modelD_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_3_Z.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_3_Z.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_3_Z.add(DropBlock2D(0.5, block_size=9))
modelD_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Z.add(MaxPooling2D(pool_size=(2, 2)))

modelD_3_Z.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_3_Z.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_3_Z.add(Flatten())
modelD_3_Z.add(Dense(256, activation='relu'))
# Block 5
modelD_3_Z.add(Dense(10, activation='softmax'))

#Build model
modelA_4_X = Sequential()
# Block 1
modelA_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_4_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_X.add(DropBlock2D(0.01, block_size=3))
modelA_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_4_X.add(Flatten())
modelA_4_X.add(Dense(256, activation='relu'))
# Block 5
modelA_4_X.add(Dense(10, activation='softmax'))



#Build model
modelA_4_Y = Sequential()
# Block 1
modelA_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

# Block 2
modelA_4_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_Y.add(DropBlock2D(0.01, block_size=5))
modelA_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_4_Y.add(Flatten())
modelA_4_Y.add(Dense(256, activation='relu'))
# Block 5
modelA_4_Y.add(Dense(10, activation='softmax'))




#Build model
modelA_4_W = Sequential()
# Block 1
modelA_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_4_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_W.add(DropBlock2D(0.01, block_size=7))
modelA_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_4_W.add(Flatten())
modelA_4_W.add(Dense(256, activation='relu'))
# Block 5
modelA_4_W.add(Dense(10, activation='softmax'))




#Build model
modelB_4_X = Sequential()
# Block 1
modelB_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_4_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_X.add(DropBlock2D(0.1, block_size=3))
modelB_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_4_X.add(Flatten())
modelB_4_X.add(Dense(256, activation='relu'))
# Block 5
modelB_4_X.add(Dense(10, activation='softmax'))



#Build model
modelB_4_Y = Sequential()
# Block 1
modelB_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_4_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_Y.add(DropBlock2D(0.1, block_size=5))
modelB_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_4_Y.add(Flatten())
modelB_4_Y.add(Dense(256, activation='relu'))
# Block 5
modelB_4_Y.add(Dense(10, activation='softmax'))




#Build model
modelB_4_W = Sequential()
# Block 1
modelB_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_4_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_W.add(DropBlock2D(0.1, block_size=7))
modelB_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_4_W.add(Flatten())
modelB_4_W.add(Dense(256, activation='relu'))
# Block 5
modelB_4_W.add(Dense(10, activation='softmax'))




#Build model
modelC_4_X = Sequential()
# Block 1
modelC_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_4_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_X.add(DropBlock2D(0.2, block_size=3))
modelC_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_4_X.add(Flatten())
modelC_4_X.add(Dense(256, activation='relu'))
# Block 5
modelC_4_X.add(Dense(10, activation='softmax'))



#Build model
modelC_4_Y = Sequential()
# Block 1
modelC_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_4_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_Y.add(DropBlock2D(0.2, block_size=5))
modelC_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_4_Y.add(Flatten())
modelC_4_Y.add(Dense(256, activation='relu'))
# Block 5
modelC_4_Y.add(Dense(10, activation='softmax'))




#Build model
modelC_4_W = Sequential()
# Block 1
modelC_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_4_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_W.add(DropBlock2D(0.2, block_size=7))
modelC_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_4_W.add(Flatten())
modelC_4_W.add(Dense(256, activation='relu'))
# Block 5
modelC_4_W.add(Dense(10, activation='softmax'))




#Build model
modelD_4_X = Sequential()
# Block 1
modelD_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_4_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_4_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_X.add(DropBlock2D(0.5, block_size=3))
modelD_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_4_X.add(Flatten())
modelD_4_X.add(Dense(256, activation='relu'))
# Block 5
modelD_4_X.add(Dense(10, activation='softmax'))



#Build model
modelD_4_Y = Sequential()
# Block 1
modelD_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_4_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_4_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_Y.add(DropBlock2D(0.5, block_size=5))
modelD_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_4_Y.add(Flatten())
modelD_4_Y.add(Dense(256, activation='relu'))
# Block 5
modelD_4_Y.add(Dense(10, activation='softmax'))




#Build model
modelD_4_W = Sequential()
# Block 1
modelD_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_4_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_4_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_W.add(DropBlock2D(0.5, block_size=7))
modelD_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_4_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_4_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_4_W.add(Flatten())
modelD_4_W.add(Dense(256, activation='relu'))
# Block 5
modelD_4_W.add(Dense(10, activation='softmax'))

#Build model
modelA_5_X = Sequential()
# Block 1
modelA_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_5_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_X.add(DropBlock2D(0.01, block_size=3))
modelA_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_5_X.add(Flatten())
modelA_5_X.add(Dense(256, activation='relu'))
# Block 5
modelA_5_X.add(Dense(10, activation='softmax'))



#Build model
modelA_5_Y = Sequential()
# Block 1
modelA_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

# Block 2
modelA_5_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_Y.add(DropBlock2D(0.01, block_size=5))
modelA_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_5_Y.add(Flatten())
modelA_5_Y.add(Dense(256, activation='relu'))
# Block 5
modelA_5_Y.add(Dense(10, activation='softmax'))




#Build model
modelA_5_W = Sequential()
# Block 1
modelA_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelA_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelA_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelA_5_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelA_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelA_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_W.add(DropBlock2D(0.01, block_size=7))
modelA_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelA_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelA_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelA_5_W.add(Flatten())
modelA_5_W.add(Dense(256, activation='relu'))
# Block 5
modelA_5_W.add(Dense(10, activation='softmax'))




#Build model
modelB_5_X = Sequential()
# Block 1
modelB_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_5_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_X.add(DropBlock2D(0.1, block_size=3))
modelB_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_5_X.add(Flatten())
modelB_5_X.add(Dense(256, activation='relu'))
# Block 5
modelB_5_X.add(Dense(10, activation='softmax'))



#Build model
modelB_5_Y = Sequential()
# Block 1
modelB_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_5_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_Y.add(DropBlock2D(0.1, block_size=5))
modelB_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_5_Y.add(Flatten())
modelB_5_Y.add(Dense(256, activation='relu'))
# Block 5
modelB_5_Y.add(Dense(10, activation='softmax'))




#Build model
modelB_5_W = Sequential()
# Block 1
modelB_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelB_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelB_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelB_5_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelB_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelB_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_W.add(DropBlock2D(0.1, block_size=7))
modelB_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelB_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelB_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelB_5_W.add(Flatten())
modelB_5_W.add(Dense(256, activation='relu'))
# Block 5
modelB_5_W.add(Dense(10, activation='softmax'))




#Build model
modelC_5_X = Sequential()
# Block 1
modelC_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_5_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_X.add(DropBlock2D(0.2, block_size=3))
modelC_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_5_X.add(Flatten())
modelC_5_X.add(Dense(256, activation='relu'))
# Block 5
modelC_5_X.add(Dense(10, activation='softmax'))



#Build model
modelC_5_Y = Sequential()
# Block 1
modelC_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_5_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_Y.add(DropBlock2D(0.2, block_size=5))
modelC_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_5_Y.add(Flatten())
modelC_5_Y.add(Dense(256, activation='relu'))
# Block 5
modelC_5_Y.add(Dense(10, activation='softmax'))




#Build model
modelC_5_W = Sequential()
# Block 1
modelC_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelC_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelC_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelC_5_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelC_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelC_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_W.add(DropBlock2D(0.2, block_size=7))
modelC_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelC_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelC_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelC_5_W.add(Flatten())
modelC_5_W.add(Dense(256, activation='relu'))
# Block 5
modelC_5_W.add(Dense(10, activation='softmax'))




#Build model
modelD_5_X = Sequential()
# Block 1
modelD_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_5_X.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_5_X.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_X.add(DropBlock2D(0.5, block_size=3))
modelD_5_X.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_X.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_X.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_5_X.add(Flatten())
modelD_5_X.add(Dense(256, activation='relu'))
# Block 5
modelD_5_X.add(Dense(10, activation='softmax'))



#Build model
modelD_5_Y = Sequential()
# Block 1
modelD_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_5_Y.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_5_Y.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_Y.add(DropBlock2D(0.5, block_size=5))
modelD_5_Y.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_Y.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_Y.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_5_Y.add(Flatten())
modelD_5_Y.add(Dense(256, activation='relu'))
# Block 5
modelD_5_Y.add(Dense(10, activation='softmax'))




#Build model
modelD_5_W = Sequential()
# Block 1
modelD_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
modelD_5_W.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
modelD_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 2
modelD_5_W.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
modelD_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 3
modelD_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_W.add(DropBlock2D(0.5, block_size=7))
modelD_5_W.add(MaxPooling2D(pool_size=(2, 2)))

modelD_5_W.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
modelD_5_W.add(MaxPooling2D(pool_size=(2, 2)))
# Block 4
modelD_5_W.add(Flatten())
modelD_5_W.add(Dense(256, activation='relu'))
# Block 5
modelD_5_W.add(Dense(10, activation='softmax'))

MODELS = [modelB_3_Y,
          modelB_3_W,
          modelB_3_Z,
          modelC_3_X,
          modelC_3_Y,
          modelC_3_W,
          modelC_3_Z,
          modelD_3_X,
          modelD_3_Y,
          modelD_3_W,
          modelD_3_Z,
          modelA_4_X,
          modelA_4_Y,
          modelA_4_W,
          modelB_4_X,
          modelB_4_Y,
          modelB_4_W,
          modelC_4_X,
          modelC_4_Y,
          modelC_4_W,
          modelD_4_X,
          modelD_4_Y,
          modelD_4_W,
          modelA_5_X,
          modelA_5_Y,
          modelA_5_W,
          modelB_5_X,
          modelB_5_Y,
          modelB_5_W,
          modelC_5_X,
          modelC_5_Y,
          modelC_5_W,
          modelD_5_X,
          modelD_5_Y,
          modelD_5_W]


NAMES = ["B_3_Y",
         "B_3_W",
         "B_3_Z",
         "C_3_X",
         "C_3_Y",
         "C_3_W",
         "C_3_Z",
         "D_3_X",
         "D_3_Y",
         "D_3_W",
         "D_3_Z",
         "A_4_X",
         "A_4_Y",
         "A_4_W",
         "B_4_X",
         "B_4_Y",
         "B_4_W",
         "C_4_X",
         "C_4_Y",
         "C_4_W",
         "D_4_X",
         "D_4_Y",
         "D_4_W",
         "A_5_X",
         "A_5_Y",
         "A_5_W",
         "B_5_X",
         "B_5_Y",
         "B_5_W",
         "C_5_X",
         "C_5_Y",
         "C_5_W",
         "D_5_X",
         "D_5_Y",
         "D_5_W"]

def call_on_model(model, names, fcn):
    return fcn(model)

def call_on_models(models, names, fcn):
    output = []
    for i in range(len(models)):
        output.append(fcn(models[i], names[i]))

    return output

def compile_and_train(model, name):
    model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
    model_checkpoint_callback = keras.callbacks.ModelCheckpoint(
        filepath=f'./model_{name}.model.keras',
        monitor='val_accuracy',
        mode='max',
        save_best_only=True)

    history = model.fit(x_train, y_train, epochs=40, validation_data=(x_test, y_test), callbacks=[model_checkpoint_callback])
    history_dict = history.history
    json.dump(history_dict, open(f"./history_{name}.json", 'w'))

outputs = call_on_models(MODELS, NAMES, compile_and_train)

RATES = ['0.01', '0.1', '0.2', '0.5']
LOCATIONS = ['Location 1', 'Location 2', 'Location 3', 'Location 4', 'Location 5']

LOCATION_TITLES = ["Validation Losses for Various Dropout Rates at Location 1",
                   "Validation Losses for Various Dropout Rates at Location 2",
                   "Validation Losses for Various Dropout Rates at Location 3",
                   "Validation Losses for Various Dropout Rates at Location 4",
                   "Validation Losses for Various Dropout Rates at Location 5"]

RATE_TITLES = ["Validation Losses at Various Locations with Droroput Rate 0.01",
               "Validation Losses at Various Locations with Droroput Rate 0.1",
               "Validation Losses at Various Locations with Droroput Rate 0.2",
               "Validation Losses at Various Locations with Droroput Rate 0.5"]

def make_rate_comparison_plots(histories, plotting_fcn):
    num_rates = len(RATES) # 4
    num_locations = len(LOCATIONS) # 5
    for loc in range(num_locations):
        histories_at_loc = []
        for rate in range(rates):
            histories_at_loc.append(histories[loc*(num_locs-1) + rate])
        plotting_fcn(histories, LOCATION_TITLES[loc])

def make_location_comparison_plots(histories, plotting_fcn):
    num_rates = len(RATES) # 4
    num_locations = len(LOCATIONS) # 5
    for rate in range(rates):
        histories_at_rate = []
        for loc in range(num_locations):
            histories_at_rate.append(histories[rate*(num_rates-1) + loc])
        plotting_fcn(histories, RATE_TITLES[rate])

